plugins {
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.9.20'
    id 'com.google.osdetector' version '1.7.3'
}

tasks.wrapper {
    gradleVersion = '8.0.2'
    distributionType = Wrapper.DistributionType.ALL
}

group = 'org.lwjgl'
description = 'LWJGL3 demos with native image by GraalVM'
version = '3.3.2-SNAPSHOT'

//returns the <os>-<arch> platform string suitable for retrieval of LWJGL natives
//(if <arch> is blank, it implies "x86_64")
def getCurrentPlatform() {
    def os = osdetector.os
    def lwjglOS = os == 'linux' ? 'linux' :
                  os == 'osx' ? 'macos' :
                  os == 'windows' ? 'windows' :
                  'unknown'
    if (lwjglOS == 'unknown')
        throw new GradleException('Unsupported OS: ' + os)

    def arch = osdetector.arch
    //consider 64-bit architectures only
    def lwjglArch = arch == 'x86_64' ? '' :
                    arch == 'aarch_64' ? 'arm64' :
                    'unknown'
    if (lwjglArch == 'unknown')
        throw new GradleException('Unsupported Architecture: ' + arch)

    return (lwjglArch == '' ? lwjglOS : (lwjglOS + '-' + lwjglArch))
}

ext {
    lwjglVersion = project.version
    jomlVersion = '1.10.5'
    swtMavenVersion = '3.123.0'  //contains Eclipse SWT 4.9.5.8 software
    graalvmVersion = '22.3.1'

    //LWJGL modules used: minimal OpenGL, plus bgfx, cuda, jemalloc, par, shaderc, vma, vulkan
    lwjglModules = [
        'lwjgl', 'lwjgl-assimp', 'lwjgl-glfw', 'lwjgl-openal', 'lwjgl-opengl', 'lwjgl-stb',  //for OpenGL demos
        'lwjgl-bgfx',                                  //for BGFX demos
        'lwjgl-cuda',                                  //for CUDA demos (require NVIDIA hardware)
        'lwjgl-jemalloc', 'lwjgl-par',                 //utilities
        'lwjgl-shaderc', 'lwjgl-vma', 'lwjgl-vulkan',  //for Vulkan demos (require discrete GPU with Vulkan driver)
    ]

    mainClassName = 'org.lwjgl.demo.DemoLauncher'
    currentPlatform = getCurrentPlatform()
    nativeImageDirName = "native-image-$currentPlatform"
}

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    mavenLocal()
    //local repository for the custom-built SWT library for Windows on Arm64 -->
    maven {
        url "file://$projectDir/lib"
    }
}

dependencies {
    implementation "org.joml:joml:$jomlVersion"
    //for compiling GraalVM substitution classes
    compileOnly "org.graalvm.sdk:graal-sdk:$graalvmVersion"

    //SWT library specific to <os>-<arch> platform string
    //(for 64-bit platforms only)
    switch (currentPlatform) {
        case 'linux':  //implicitly 'x86_64' architecture
            implementation("org.eclipse.platform:org.eclipse.swt.gtk.linux.x86_64:$swtMavenVersion") {
                exclude group: 'org.eclipse.platform', module: 'org.eclipse.swt'
            }
            break
        case 'linux-arm64':
            implementation("org.eclipse.platform:org.eclipse.swt.gtk.linux.aarch64:$swtMavenVersion") {
                exclude group: 'org.eclipse.platform', module: 'org.eclipse.swt'
            }
            break
        case 'macos':  //implicitly 'x86_64' architecture
            implementation("org.eclipse.platform:org.eclipse.swt.cocoa.macosx.x86_64:$swtMavenVersion") {
                exclude group: 'org.eclipse.platform', module: 'org.eclipse.swt'
            }
            break
        case 'macos-arm64':
            implementation("org.eclipse.platform:org.eclipse.swt.cocoa.macosx.aarch64:$swtMavenVersion") {
                exclude group: 'org.eclipse.platform', module: 'org.eclipse.swt'
            }
            break
        case 'windows':  //implicitly 'x86_64' architecture
            implementation("org.eclipse.platform:org.eclipse.swt.win32.win32.x86_64:$swtMavenVersion") {
                exclude group: 'org.eclipse.platform', module: 'org.eclipse.swt'
            }
            break
        case 'windows-arm64':
            //No SWT library for Windows on Arm64 is yet available in Maven Central;
            //temporarily use a local custom-built SWT library for Windows on Arm64:
            implementation "org.eclipse.platform:org.eclipse.swt.win32.win32.aarch64:$swtMavenVersion-SNAPSHOT"
            break
        default:
            throw new GradleException('Unknown platform for SWT: ' + currentPlatform)
    }

    //get recommended dependency versions from the LWJGL BOM
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    //add LWJGL modules and their natives of current OS to the compile and runtime classpaths
    lwjglModules.each {
        implementation "org.lwjgl:$it"
        if (it != 'lwjgl-cuda' && it != 'lwjgl-egl') { //cuda, egl have no native modules
            if (it == 'lwjgl-bgfx') {
                if (currentPlatform == 'windows-arm64') {
                    //No BGFX native library is yet available for Windows on ARM64;
                    //temporarily use the x64 native library, at least for required native loading
                    //at runtime (but BGFX demos won't work though)
                    runtimeOnly "org.lwjgl:$it::natives-windows"
                } else {
                    runtimeOnly "org.lwjgl:$it::natives-$currentPlatform"
                }
            } else if (it == 'lwjgl-vulkan') {
                if (osdetector.os == 'osx') {
                    //Vulkan natives exist for Mac OSX only
                    runtimeOnly "org.lwjgl:$it::natives-$currentPlatform"
                }
            } else {
                runtimeOnly "org.lwjgl:$it::natives-$currentPlatform"
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['res', "graal-cfg/$currentPlatform"]
        }
    }
}

application {
    mainClass = project.mainClassName
    applicationName = project.name  //name of the resulting native executable
}

compileJava {
    options.release = 11  //use JDK11+ for compiling & running
    options.encoding = 'UTF-8'
}

run {
    //default application to be run is the demo launcher,
    //but specific demo class can be run directly as an argument, e.g. bgfx.Bump
    //(the package "org.lwjgl.demo." is prepended automatically)
    //
    //args 'bgfx.Bump'

    //get system properties specified from the command line (for debugging, etc.)
    //and pass them on to the running application's JVM
    systemProperties = System.getProperties()

    //use the following jvmArgs for as many different run scenarios as possible,
    //and for all the code-execution paths as much as possible,
    //to generate (or merge with) the GraalVM native-image configuration files
    //in the graal-cfg/$currentPlatform/META-INF/native-image directory.
    //This directory is read by GraalVM during the native-image build.

    //jvmArgs = ["-agentlib:native-image-agent=config-merge-dir=graal-cfg/$currentPlatform/META-INF/native-image"]
}

task extractLwjglManifest(type: Copy) {
    from {
        configurations.compileClasspath.filter { it.name == "lwjgl-${lwjglVersion}.jar" }
                                       .collect { zipTree(it) }
    }
    include 'META-INF/MANIFEST.MF'
    into "$buildDir/tmp"
}

//create a stand-alone executable uber jar
//including all dependencies for the current platform
task uberJar(type: Jar) {
    dependsOn extractLwjglManifest
    archiveClassifier = "no-deps-$currentPlatform"

    with jar
    manifest {
        from (extractLwjglManifest.destinationDir.path + '/META-INF/MANIFEST.MF') {
            eachEntry { details -> 
                if (details.key == 'Created-By')
                    details.value = System.getProperty('java.runtime.version') + ' (' + System.getProperty('java.vendor') + ')'
                else if (details.key == 'Ant-Version')
                    details.exclude()
            }
        }
        attributes(
            'Main-Class': project.mainClassName,
            'Built-By': System.getProperty('user.name'),
            'Gradle-Version': 'Gradle ' + gradle.getGradleVersion(),
        )
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    duplicatesStrategy 'exclude'
}

//remove unneeded .dll/.txt files
task removeUnneededDllFiles {
    doLast {
        if (file("$buildDir/$nativeImageDirName").exists()) {
            ant.move(todir: "$buildDir/tmp/$nativeImageDirName") {
                fileset(dir: "$buildDir/$nativeImageDirName") {
                    include name: '*.dll'
                    include name: '*.pdb'
                    include name: '*.txt'
                }
            }
        }
        if (file("$buildDir/$nativeImageDirName/reports").exists()) {
            ant.move(file: "$buildDir/$nativeImageDirName/reports",
                     tofile: "$buildDir/tmp/$nativeImageDirName/reports")
        }
        if (file("$buildDir/$nativeImageDirName/sources").exists()) {
            ant.move(file: "$buildDir/$nativeImageDirName/sources",
                     tofile: "$buildDir/tmp/$nativeImageDirName/sources")
        }
    }
}

graalvmNative {
    toolchainDetection = false
    binaries {
        main {
            imageName = project.name
            mainClass = project.mainClassName
            debug = false
            verbose = true
            fallback = false

            buildArgs.add('--initialize-at-run-time=org.lwjgl')
            buildArgs.add('--native-image-info')
            buildArgs.add("-H:Path=$buildDir/$nativeImageDirName")
            buildArgs.add("-H:TempDirectory=$buildDir/tmp/$nativeImageDirName")
            //buildArgs.add('-H:+TraceNativeToolUsage')

            useFatJar = false
        }
    }
    metadataRepository {
        enabled = false
    }
}

tasks.named("nativeCompile") {
    //use the uber jar when long classpath becomes a problem in Windows:
    //dependsOn uberJar
    //classpathJar = uberJar.archiveFile
    finalizedBy removeUnneededDllFiles
}

